
NAME: S.PADMASRI
REG.NO:192124165
DEPT:AI & DS
GITHUBLINK: https://github.com/Padmasrisevugarajan/ITA0443-Statistics-with-R-Programming


1. Demonstrate Vector Recycling in R.
CODE:
A=10:14
B=3:5
print(A+B)
OUTPUT:
> A=10:14
> B=3:5
> print(A+B)
[1] 13 15 17 16 18

2. Demonstrate the usage of apply function in R
CODE:
matri_x <- matrix(C<-(1:10),nrow=3, ncol=10)
print( "sample matrix:")
matri_x
print("sum across rows:")
apply( matri_x, 1, sum)
print("mean across columns:")
apply( matri_x, 2, mean)
OUTPUT:
> matri_x <- matrix(C<-(1:10),nrow=3, ncol=10)
> print( "sample matrix:")
[1] "sample matrix:"
> matri_x
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]    1    4    7   10    3    6    9    2    5     8
[2,]    2    5    8    1    4    7   10    3    6     9
[3,]    3    6    9    2    5    8    1    4    7    10
> print("sum across rows:")
[1] "sum across rows:"
> apply( matri_x, 1, sum)
[1] 55 55 55
> print("mean across columns:")
[1] "mean across columns:"
> apply( matri_x, 2, mean)
 [1] 2.000000 5.000000 8.000000 4.333333 4.000000 7.000000 6.666667 3.000000
 [9] 6.000000 9.000000

3. Demonstrate the usage of lapply function in R
CODE:
names <- c("padmasri", "priya","nivetha", "tejea","fattima")
print( "original data:")
names
print("data after lapply():")
lapply(names, toupper)

OUTPUT:
> names <- c("padmasri", "priya","nivetha", "tejea","fattima")
> print( "original data:")
[1] "original data:"
> names
[1] "padmasri" "priya"    "nivetha"  "tejea"    "fattima" 
> print("data after lapply():")
[1] "data after lapply():"
> lapply(names, toupper)
[[1]]
[1] "PADMASRI"

[[2]]
[1] "PRIYA"

[[3]]
[1] "NIVETHA"

[[4]]
[1] "TEJEA"

[[5]]
[1] "FATTIMA"

4. Demonstrate the usage of sapply function in R
CODE:
df<- data.frame( x=c(1,2,3,4,5,6),y=c(12,7,5,4,8,9))
print( "original data:")
df
print("data after sapply():")
sapply(df, max)

OUTPUT:
> df<- data.frame( x=c(1,2,3,4,5,6),y=c(12,7,5,4,8,9))
> print( "original data:")
[1] "original data:"
> df
  x  y
1 1 12
2 2  7
3 3  5
4 4  4
5 5  8
6 6  9
> print("data after sapply():")
[1] "data after sapply():"
> sapply(df, max)
 x  y 
 6 12

5. Demonstrate the usage of tapply function in R

CODE:
library(tidyverse)
print(" Head of data:")
head(diamonds)
print("Average price for each cut of diamond:")
tapply(diamonds$price, diamonds$cut, mean)

OUTPUT:
> library(tidyverse)
> print(" Head of data:")
[1] " Head of data:"
> head(diamonds)
# A tibble: 6 Ã— 10
  carat cut       color clarity depth table price     x     y     z
  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
> print("Average price for each cut of diamond:")
[1] "Average price for each cut of diamond:"
> tapply(diamonds$price, diamonds$cut, mean)
     Fair      Good Very Good   Premium     Ideal 
 4358.758  3928.864  3981.760  4584.258  3457.542 


6. Demonstrate the usage of mapply function in R

CODE:
x<-list(c(4, 3, 2, 1))
y<-list(c(6, 7, 8, 9))
result<-mapply(sum, x, y)
print(result)


OUTPUT:
> x<-list(c(4, 3, 2, 1))
> y<-list(c(6, 7, 8, 9))
> result<-mapply(sum, x, y)
> print(result)
[1] 40

7. Sum of Natural Numbers using Recursion

CODE:
s<-function(n){
  if (n<=1){
    return(n)
  }else{
    return(n+s(n-1))
  }
}
s(7)

OUTPUT:
> s<-function(n){
+   if (n<=1){
+     return(n)
+   }else{
+     return(n+s(n-1))
+   }
+ }
> s(7)
[1] 28

8. Write a program to generate Fibonacci sequence using Recursion in R

CODE:
rec <- function(n) {
  if(n <= 1) {
    return(n)
  } else {
    return(rec(n-1) + rec(n-2))
  }
}
nterms = as.integer(readline(prompt="How many terms? "))
if(nterms <= 0) {
  print("Plese enter a positive integer")
} else {
  print("Fibonacci sequence:")
  for(i in 0:(nterms-1)) {
    print(rec(i))
  }
}
OUTPUT:
How many terms? 9
[1] "Fibonacci sequence:"
[1] 0
[1] 1
[1] 1
[1] 2
[1] 3
[1] 5
[1] 8
[1] 13
[1] 21

9. Write a program to find factorial of a number in R using recursion.

CODE:
rec<- function(n) {
  if(n <= 1) {
    return(1)
  } else { 
    return(n * rec(n-1))
  }
}
rec(8)

OUTPUT:
> rec<- function(n) {
+   if(n <= 1) {
+     return(1)
+   } else { 
+     return(n * rec(n-1))
+   }
+ }
> rec(8)
[1] 40320
> 
